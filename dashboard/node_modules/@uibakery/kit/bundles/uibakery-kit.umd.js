(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/platform-browser'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@uibakery/kit', ['exports', '@angular/core', '@angular/platform-browser', '@angular/common'], factory) :
    (global = global || self, factory((global.uibakery = global.uibakery || {}, global.uibakery.kit = {}), global.ng.core, global.ng.platformBrowser, global.ng.common));
}(this, function (exports, core, platformBrowser, common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var BkSafePipe = /** @class */ (function () {
        function BkSafePipe(sanitizer) {
            this.sanitizer = sanitizer;
        }
        /**
         * @param {?} value
         * @param {?} type
         * @return {?}
         */
        BkSafePipe.prototype.transform = /**
         * @param {?} value
         * @param {?} type
         * @return {?}
         */
        function (value, type) {
            if (!value) {
                return null;
            }
            switch (type) {
                case 'html':
                    return this.sanitizer.bypassSecurityTrustHtml(value);
                case 'style':
                    return this.sanitizer.bypassSecurityTrustStyle(value);
                case 'script':
                    return this.sanitizer.bypassSecurityTrustScript(value);
                case 'url':
                    return this.sanitizer.bypassSecurityTrustUrl(value);
                case 'resourceUrl':
                    return this.sanitizer.bypassSecurityTrustResourceUrl(value);
                default:
                    throw new Error("Invalid safe type specified: " + type);
            }
        };
        BkSafePipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'safe',
                    },] }
        ];
        /** @nocollapse */
        BkSafePipe.ctorParameters = function () { return [
            { type: platformBrowser.DomSanitizer }
        ]; };
        return BkSafePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var BkPipeModule = /** @class */ (function () {
        function BkPipeModule() {
        }
        BkPipeModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule],
                        declarations: [BkSafePipe],
                        exports: [BkSafePipe],
                    },] }
        ];
        return BkPipeModule;
    }());

    exports.BkPipeModule = BkPipeModule;
    exports.BkSafePipe = BkSafePipe;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=uibakery-kit.umd.js.map
